module multi_seven_seg #(
    DIGITS = 4 : DIGITS > 0,
    DIV = 16 : DIV >= 0
)(
    input clk,                // clock
    input rst,                // reset
    input values[DIGITS][4],  // values to show
    output seg[7],            // LED segments
    output sel[DIGITS],        // Digit select
    output out[12]
) {
    
    // number of bits required to store DIGITS-1
    const DIGIT_BITS = $clog2(DIGITS)
    
    .clk(clk), .rst(rst) {
        counter ctr (#DIV(DIV), #SIZE(DIGIT_BITS), #TOP(DIGITS-1)) 
    }
    
    seven_seg seg_dec                        // segment decoder
    decoder digit_dec (#WIDTH(DIGIT_BITS)) // digit decoder
    
    always {
        out = b000000000000

        case(values[ctr.value]){
            4h0: out = 12b011001001011;
            4h1: out = 12b000001001000;
            4h2: out = 12b010001010011;
            4h3: out = 12b010001011010;
            4h4: out = 12b001001011000;
            4h5: out = 12b011000011010;
            4h6: out = 12b011000011011;
            4h7: out = 12b010001001000;
            4h8: out = 12b011001011011;
            4h9: out = 12b011001011010;
            default:
                out = 12b000000000000;
        }
        case(ctr.value){
            b00:
                out[5] = b1
            b01:
                out[7] = b1
            b10:
                out[8] = b1
            b11:
                out[11] = b1
        }
    }
}