module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output

    // buttons
    // TODO: pass through conditioner and add edge detector
    input butt_dirs[4],     // direction buttons
    input butt_sel_desel[2],// select and deselect buttons
    input butt_reset,       // reset button, to override reset button
    input butt_next_play,   // next and play button, action based on FSM state
    // ^ to pass through edge detector
    
    // matrix connections
    output mataddr[5],      // ABCDE addresses
    output mattop[3],       // top led data
    output matbot[3],       // bot led data
    output matclk,          // clock
    output matoe,           // OE
    output matlat,          // latch
    output matgnd[2],       // ground

    // seven segment leds
    output aseg[12],      // counter for player A
    output bseg[12],      // counter for player B
    output timerseg[12],       // game timer

    // testing
    input testpullup        // default high?

) {
    const CLK = 100000000

    alu alum
    

    .clk(clk) {

        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        
        
        // button conditioners and edge detector for next/play
        button_conditioner cond_butt_dirs[4](#CLK_FREQ(4x{{CLK}}))
        button_conditioner cond_butt_sel_desel[2](#CLK_FREQ(2x{{CLK}}))
        button_conditioner cond_butt_next_play(#CLK_FREQ(CLK))
        edge_detector edge_next_play(#RISE(1),#FALL(0))
        
        
        dff pixeldata[2](#INIT(b00))

        .rst(rst) {
            display_driver display
            
            // gameclk ticks when gamecounter is 0, once a second
            counter gamecounter(#SIZE($clog2(CLK)),#TOP(CLK),#DIV(0))
            edge_detector gameclk(#RISE(0),#FALL(1))
            
            // FSM
            fsm sm
            
            // dual bram module
            bram brams
            
            // custom 32-bit regfile
            regfile reg
            
            // shift registers
            fifo sr1(#WIDTH(2),#ENTRIES(4))
            fifo sr2(#WIDTH(2),#ENTRIES(4))
            fifo sr3(#WIDTH(2),#ENTRIES(4))
            
        }
    }


    always {

        reset_cond.in = ~butt_reset     // input raw inverted reset signal
        rst = reset_cond.out            // conditioned reset
        led = 8h00                      // turn LEDs off
        usb_tx = usb_rx                 // echo the serial data
        
        // button processing
        cond_butt_dirs.in = butt_dirs
        cond_butt_sel_desel.in = butt_sel_desel
        cond_butt_next_play.in = butt_next_play
        edge_next_play.in = cond_butt_next_play.out

        // connect game clock
        gameclk.in = gamecounter[$clog2(gamecounter)]
        
        // matrix default connections
        mataddr = 0
        mattop = 0
        matbot = 0
        matclk = 0
        matoe = 0
        matlat = 0
        matgnd = 0
        
        // FSM connections -------------------------------------------------
        
        // buttons connections
        sm.next_start_button = edge_next_play.out
        sm.reset_button = butt_reset
        sm.move_up_button = cond_butt_dirs[0]
        sm.move_down_button = cond_butt_dirs[1]
        sm.move_left_button = cond_butt_dirs[2]
        sm.move_right_button = cond_butt_dirs[3]
        sm.select_button = cond_butt_sel_desel[0]
        sm.deselect_button = cond_butt_sel_desel[1]

        // seven segment // ~ if not cathode/anode
        aseg = sm.aseg
        bseg = sm.bseg
        timerseg = sm.timerseg
        sm.pac = reg.pac
        sm.pbc = reg.pbc
        sm.timer = reg.timer
        
        // regfile inputs
        reg.ra1 = sm.ra1
        reg.ra2 = sm.ra2
        reg.wa = sm.wa
        
        // alu
        sm.aluout = alum.out
        
        // a selector
        case(sm.asel) {
            0: alum.a = reg.rd1
            default: alu.a = reg.rd1
        }
        
        // b selector
        case(sm.bsel) {
            0: alum.b = reg.rd2
            1: alum.b = 1
            2: alum.b = 2
            3: alum.b = 3
            4: alum.b = 64
            5: alum.b = 63
            6: alum.b = 128
            7: alum.b = 255
            8: alum.b = 4223
            9: alum.b = 4160
        }

        // wd selector
        case(sm.wdsel) {
            0: reg.wd = alu.out
            1: reg.wd = 0
            2: reg.wd = 1
            3: reg.wd = 2
            4: reg.wd = brams.brd
            5: reg.wd = sr1.dout
            6: reg.wd = 60
            7: reg.wd = 2144
            8: reg.wd = 11
            9: reg.wd = 64
            default: reg.wd = 0
        }

        // shift register connections
        








        
        
        if (display.reading && display.addr[6]) {
            pixeldata.d = b10
        }
        else if (display.reading) {
            pixeldata.d = b11
        }


        amod.a = 32b0
        amod.b = 32b0
        amod.alufn = 6b0
        
        display.data = pixeldata.q
        mataddr = display.address
        mattop = display.toppixel
        matbot = display.botpixel
        matclk = display.sclk_out
        matoe = display.blank
        matlat = display.latch
        matgnd = b00

        // display.data = 1
        // mataddr = 1
        // mattop = 1
        // matbot = 1
        // matclk = 1
        // matoe = 1
        // matlat = 1
        // matgnd = 1

        butt_cond.in = testpullup
        led = 8x{butt_cond.out}
    }
}