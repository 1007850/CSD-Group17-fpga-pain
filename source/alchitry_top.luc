module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    
    // matrix connections
    output mataddr[5],      // ABCDE addresses
    output mattop[3],       // top led data
    output matbot[3],       // bot led data
    output matclk,          // clock
    output matoe,           // OE
    output matlat,          // latch
    output matgnd[2],       // ground

    // testing
    input testpullup        // default high?

) {
    const CLK = 100000000

    alu amod
    sig rst                 // reset signal
    .clk(clk) {
        .rst(rst) {
            display_driver display
            dff pixeldata[2](#INIT(b00))
            
            counter gameclk(#SIZE(1),#TOP(CLK),#DIV($clog(CLK)))
            edge_detector(#RISE(0),#FALL(1))
        }
    }

    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        button_conditioner butt_cond(#CLK_FREQ(100000000))
    }

    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset

        led = 8h00              // turn LEDs off

        usb_tx = usb_rx         // echo the serial data
        
        if (display.reading && display.addr[6]) {
            pixeldata.d = b10
        }
        else if (display.reading) {
            pixeldata.d = b11
        }


        amod.a = 32b0
        amod.b = 32b0
        amod.alufn = 6b0
        
        display.data = pixeldata.q
        mataddr = display.address
        mattop = display.toppixel
        matbot = display.botpixel
        matclk = display.sclk_out
        matoe = display.blank
        matlat = display.latch
        matgnd = b00

        // display.data = 1
        // mataddr = 1
        // mattop = 1
        // matbot = 1
        // matclk = 1
        // matoe = 1
        // matlat = 1
        // matgnd = 1

        butt_cond.in = testpullup
        led = 8x{butt_cond.out}
    }
}