/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu_shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift,
        output reg illop
    );
    logic [31:0] R_4eda200d_i;
    logic [31:0] RR_4eda200d_i;
    logic [31:0] R_5433a60c_i;
    logic [31:0] RR_5433a60c_i;
    logic [31:0] R_319bef98_i;
    logic [31:0] RR_319bef98_i;
    localparam logic [4:0][4:0] _MP_SHIFT_900502918 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbls_a;
    logic [4:0] M_xbls_shift;
    logic [4:0] M_xbls_pad;
    logic [4:0][31:0] M_xbls_out;
    
    genvar idx_0_900502918;
    
    generate
        for (idx_0_900502918 = 0; idx_0_900502918 < 5; idx_0_900502918 = idx_0_900502918 + 1) begin: forLoop_idx_0_900502918
            alu_shifter_left #(
                .SHIFT(_MP_SHIFT_900502918[idx_0_900502918])
            ) xbls (
                .a(M_xbls_a[idx_0_900502918]),
                .shift(M_xbls_shift[idx_0_900502918]),
                .pad(M_xbls_pad[idx_0_900502918]),
                .out(M_xbls_out[idx_0_900502918])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_924024936 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbrs_a;
    logic [4:0] M_xbrs_shift;
    logic [4:0] M_xbrs_pad;
    logic [4:0][31:0] M_xbrs_out;
    
    genvar idx_0_924024936;
    
    generate
        for (idx_0_924024936 = 0; idx_0_924024936 < 5; idx_0_924024936 = idx_0_924024936 + 1) begin: forLoop_idx_0_924024936
            alu_shifter_right #(
                .SHIFT(_MP_SHIFT_924024936[idx_0_924024936])
            ) xbrs (
                .a(M_xbrs_a[idx_0_924024936]),
                .shift(M_xbrs_shift[idx_0_924024936]),
                .pad(M_xbrs_pad[idx_0_924024936]),
                .out(M_xbrs_out[idx_0_924024936])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_1689735100 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbras_a;
    logic [4:0] M_xbras_shift;
    logic [4:0] M_xbras_pad;
    logic [4:0][31:0] M_xbras_out;
    
    genvar idx_0_1689735100;
    
    generate
        for (idx_0_1689735100 = 0; idx_0_1689735100 < 5; idx_0_1689735100 = idx_0_1689735100 + 1) begin: forLoop_idx_0_1689735100
            alu_shifter_right_ari #(
                .SHIFT(_MP_SHIFT_1689735100[idx_0_1689735100])
            ) xbras (
                .a(M_xbras_a[idx_0_1689735100]),
                .shift(M_xbras_shift[idx_0_1689735100]),
                .pad(M_xbras_pad[idx_0_1689735100]),
                .out(M_xbras_out[idx_0_1689735100])
            );
        end
    endgenerate
    
    
    always @* begin
        M_xbls_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbls_shift = 1'h0;
        M_xbls_pad = 1'h0;
        M_xbrs_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbrs_shift = 1'h0;
        M_xbrs_pad = 1'h0;
        M_xbras_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbras_shift = 1'h0;
        M_xbras_pad = 1'h0;
        for (RR_4eda200d_i = 0; RR_4eda200d_i < 3'h5; RR_4eda200d_i = RR_4eda200d_i + 1) begin
      R_4eda200d_i = (0) + RR_4eda200d_i * (1);
            if (R_4eda200d_i == 1'h0) begin
                M_xbls_a[R_4eda200d_i] = a;
                M_xbls_shift[R_4eda200d_i] = b[R_4eda200d_i];
                M_xbls_pad[R_4eda200d_i] = 1'h0;
            end else begin
                M_xbls_a[R_4eda200d_i] = M_xbls_out[R_4eda200d_i - 1'h1];
                M_xbls_shift[R_4eda200d_i] = b[R_4eda200d_i];
                M_xbls_pad[R_4eda200d_i] = 1'h0;
            end
        end
        for (RR_5433a60c_i = 0; RR_5433a60c_i < 3'h5; RR_5433a60c_i = RR_5433a60c_i + 1) begin
      R_5433a60c_i = (0) + RR_5433a60c_i * (1);
            if (R_5433a60c_i == 1'h0) begin
                M_xbrs_a[R_5433a60c_i] = a;
                M_xbrs_shift[R_5433a60c_i] = b[R_5433a60c_i];
                M_xbrs_pad[R_5433a60c_i] = 1'h0;
            end else begin
                M_xbrs_a[R_5433a60c_i] = M_xbrs_out[R_5433a60c_i - 1'h1];
                M_xbrs_shift[R_5433a60c_i] = b[R_5433a60c_i];
                M_xbrs_pad[R_5433a60c_i] = 1'h0;
            end
        end
        for (RR_319bef98_i = 0; RR_319bef98_i < 3'h5; RR_319bef98_i = RR_319bef98_i + 1) begin
      R_319bef98_i = (0) + RR_319bef98_i * (1);
            if (R_319bef98_i == 1'h0) begin
                M_xbras_a[R_319bef98_i] = a;
                M_xbras_shift[R_319bef98_i] = b[R_319bef98_i];
                M_xbras_pad[R_319bef98_i] = a[5'h1f];
            end else begin
                M_xbras_a[R_319bef98_i] = M_xbras_out[R_319bef98_i - 1'h1];
                M_xbras_shift[R_319bef98_i] = b[R_319bef98_i];
                M_xbras_pad[R_319bef98_i] = a[5'h1f];
            end
        end
        illop = 1'h0;
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_xbls_out[3'h4];
            end
            2'h1: begin
                shift = M_xbrs_out[3'h4];
            end
            2'h3: begin
                shift = M_xbras_out[3'h4];
            end
            default: begin
                shift = 1'h0;
                illop = 1'h1;
            end
        endcase
    end
    
    
endmodule