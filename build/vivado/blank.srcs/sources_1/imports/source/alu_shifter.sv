/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu_shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift,
        output reg illop
    );
    logic [31:0] R_431a31a4_i;
    logic [31:0] RR_431a31a4_i;
    logic [31:0] R_2ac09f66_i;
    logic [31:0] RR_2ac09f66_i;
    logic [31:0] R_00758c14_i;
    logic [31:0] RR_00758c14_i;
    localparam logic [4:0][4:0] _MP_SHIFT_670941761 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbls_a;
    logic [4:0] M_xbls_shift;
    logic [4:0] M_xbls_pad;
    logic [4:0][31:0] M_xbls_out;
    
    genvar idx_0_670941761;
    
    generate
        for (idx_0_670941761 = 0; idx_0_670941761 < 5; idx_0_670941761 = idx_0_670941761 + 1) begin: forLoop_idx_0_670941761
            alu_shifter_left #(
                .SHIFT(_MP_SHIFT_670941761[idx_0_670941761])
            ) xbls (
                .a(M_xbls_a[idx_0_670941761]),
                .shift(M_xbls_shift[idx_0_670941761]),
                .pad(M_xbls_pad[idx_0_670941761]),
                .out(M_xbls_out[idx_0_670941761])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_694315623 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbrs_a;
    logic [4:0] M_xbrs_shift;
    logic [4:0] M_xbrs_pad;
    logic [4:0][31:0] M_xbrs_out;
    
    genvar idx_0_694315623;
    
    generate
        for (idx_0_694315623 = 0; idx_0_694315623 < 5; idx_0_694315623 = idx_0_694315623 + 1) begin: forLoop_idx_0_694315623
            alu_shifter_right #(
                .SHIFT(_MP_SHIFT_694315623[idx_0_694315623])
            ) xbrs (
                .a(M_xbrs_a[idx_0_694315623]),
                .shift(M_xbrs_shift[idx_0_694315623]),
                .pad(M_xbrs_pad[idx_0_694315623]),
                .out(M_xbrs_out[idx_0_694315623])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_683100699 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbras_a;
    logic [4:0] M_xbras_shift;
    logic [4:0] M_xbras_pad;
    logic [4:0][31:0] M_xbras_out;
    
    genvar idx_0_683100699;
    
    generate
        for (idx_0_683100699 = 0; idx_0_683100699 < 5; idx_0_683100699 = idx_0_683100699 + 1) begin: forLoop_idx_0_683100699
            alu_shifter_right_ari #(
                .SHIFT(_MP_SHIFT_683100699[idx_0_683100699])
            ) xbras (
                .a(M_xbras_a[idx_0_683100699]),
                .shift(M_xbras_shift[idx_0_683100699]),
                .pad(M_xbras_pad[idx_0_683100699]),
                .out(M_xbras_out[idx_0_683100699])
            );
        end
    endgenerate
    
    
    always @* begin
        M_xbls_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbls_shift = 1'h0;
        M_xbls_pad = 1'h0;
        M_xbrs_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbrs_shift = 1'h0;
        M_xbrs_pad = 1'h0;
        M_xbras_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbras_shift = 1'h0;
        M_xbras_pad = 1'h0;
        for (RR_431a31a4_i = 0; RR_431a31a4_i < 3'h5; RR_431a31a4_i = RR_431a31a4_i + 1) begin
      R_431a31a4_i = (0) + RR_431a31a4_i * (1);
            if (R_431a31a4_i == 1'h0) begin
                M_xbls_a[R_431a31a4_i] = a;
                M_xbls_shift[R_431a31a4_i] = b[R_431a31a4_i];
                M_xbls_pad[R_431a31a4_i] = 1'h0;
            end else begin
                M_xbls_a[R_431a31a4_i] = M_xbls_out[R_431a31a4_i - 1'h1];
                M_xbls_shift[R_431a31a4_i] = b[R_431a31a4_i];
                M_xbls_pad[R_431a31a4_i] = 1'h0;
            end
        end
        for (RR_2ac09f66_i = 0; RR_2ac09f66_i < 3'h5; RR_2ac09f66_i = RR_2ac09f66_i + 1) begin
      R_2ac09f66_i = (0) + RR_2ac09f66_i * (1);
            if (R_2ac09f66_i == 1'h0) begin
                M_xbrs_a[R_2ac09f66_i] = a;
                M_xbrs_shift[R_2ac09f66_i] = b[R_2ac09f66_i];
                M_xbrs_pad[R_2ac09f66_i] = 1'h0;
            end else begin
                M_xbrs_a[R_2ac09f66_i] = M_xbrs_out[R_2ac09f66_i - 1'h1];
                M_xbrs_shift[R_2ac09f66_i] = b[R_2ac09f66_i];
                M_xbrs_pad[R_2ac09f66_i] = 1'h0;
            end
        end
        for (RR_00758c14_i = 0; RR_00758c14_i < 3'h5; RR_00758c14_i = RR_00758c14_i + 1) begin
      R_00758c14_i = (0) + RR_00758c14_i * (1);
            if (R_00758c14_i == 1'h0) begin
                M_xbras_a[R_00758c14_i] = a;
                M_xbras_shift[R_00758c14_i] = b[R_00758c14_i];
                M_xbras_pad[R_00758c14_i] = a[5'h1f];
            end else begin
                M_xbras_a[R_00758c14_i] = M_xbras_out[R_00758c14_i - 1'h1];
                M_xbras_shift[R_00758c14_i] = b[R_00758c14_i];
                M_xbras_pad[R_00758c14_i] = a[5'h1f];
            end
        end
        illop = 1'h0;
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_xbls_out[3'h4];
            end
            2'h1: begin
                shift = M_xbrs_out[3'h4];
            end
            2'h3: begin
                shift = M_xbras_out[3'h4];
            end
            default: begin
                shift = 1'h0;
                illop = 1'h1;
            end
        endcase
    end
    
    
endmodule