/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift,
        output reg illop
    );
    logic [31:0] R_557d121d_i;
    logic [31:0] RR_557d121d_i;
    logic [31:0] R_57d6f8d4_i;
    logic [31:0] RR_57d6f8d4_i;
    logic [31:0] R_2d84f977_i;
    logic [31:0] RR_2d84f977_i;
    localparam logic [4:0][4:0] _MP_SHIFT_158727687 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbls_a;
    logic [4:0] M_xbls_shift;
    logic [4:0] M_xbls_pad;
    logic [4:0][31:0] M_xbls_out;
    
    genvar idx_0_158727687;
    
    generate
        for (idx_0_158727687 = 0; idx_0_158727687 < 5; idx_0_158727687 = idx_0_158727687 + 1) begin: forLoop_idx_0_158727687
            x_bit_left_shifter #(
                .SHIFT(_MP_SHIFT_158727687[idx_0_158727687])
            ) xbls (
                .a(M_xbls_a[idx_0_158727687]),
                .shift(M_xbls_shift[idx_0_158727687]),
                .pad(M_xbls_pad[idx_0_158727687]),
                .out(M_xbls_out[idx_0_158727687])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_1348063785 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbrs_a;
    logic [4:0] M_xbrs_shift;
    logic [4:0] M_xbrs_pad;
    logic [4:0][31:0] M_xbrs_out;
    
    genvar idx_0_1348063785;
    
    generate
        for (idx_0_1348063785 = 0; idx_0_1348063785 < 5; idx_0_1348063785 = idx_0_1348063785 + 1) begin: forLoop_idx_0_1348063785
            x_bit_right_shifter #(
                .SHIFT(_MP_SHIFT_1348063785[idx_0_1348063785])
            ) xbrs (
                .a(M_xbrs_a[idx_0_1348063785]),
                .shift(M_xbrs_shift[idx_0_1348063785]),
                .pad(M_xbrs_pad[idx_0_1348063785]),
                .out(M_xbrs_out[idx_0_1348063785])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_2078382262 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbras_a;
    logic [4:0] M_xbras_shift;
    logic [4:0] M_xbras_pad;
    logic [4:0][31:0] M_xbras_out;
    
    genvar idx_0_2078382262;
    
    generate
        for (idx_0_2078382262 = 0; idx_0_2078382262 < 5; idx_0_2078382262 = idx_0_2078382262 + 1) begin: forLoop_idx_0_2078382262
            x_bit_right_ari_shifter #(
                .SHIFT(_MP_SHIFT_2078382262[idx_0_2078382262])
            ) xbras (
                .a(M_xbras_a[idx_0_2078382262]),
                .shift(M_xbras_shift[idx_0_2078382262]),
                .pad(M_xbras_pad[idx_0_2078382262]),
                .out(M_xbras_out[idx_0_2078382262])
            );
        end
    endgenerate
    
    
    always @* begin
        M_xbls_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbls_shift = 1'h0;
        M_xbls_pad = 1'h0;
        M_xbrs_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbrs_shift = 1'h0;
        M_xbrs_pad = 1'h0;
        M_xbras_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbras_shift = 1'h0;
        M_xbras_pad = 1'h0;
        for (RR_557d121d_i = 0; RR_557d121d_i < 3'h5; RR_557d121d_i = RR_557d121d_i + 1) begin
      R_557d121d_i = (0) + RR_557d121d_i * (1);
            if (R_557d121d_i == 1'h0) begin
                M_xbls_a[R_557d121d_i] = a;
                M_xbls_shift[R_557d121d_i] = b[R_557d121d_i];
                M_xbls_pad[R_557d121d_i] = 1'h0;
            end else begin
                M_xbls_a[R_557d121d_i] = M_xbls_out[R_557d121d_i - 1'h1];
                M_xbls_shift[R_557d121d_i] = b[R_557d121d_i];
                M_xbls_pad[R_557d121d_i] = 1'h0;
            end
        end
        for (RR_57d6f8d4_i = 0; RR_57d6f8d4_i < 3'h5; RR_57d6f8d4_i = RR_57d6f8d4_i + 1) begin
      R_57d6f8d4_i = (0) + RR_57d6f8d4_i * (1);
            if (R_57d6f8d4_i == 1'h0) begin
                M_xbrs_a[R_57d6f8d4_i] = a;
                M_xbrs_shift[R_57d6f8d4_i] = b[R_57d6f8d4_i];
                M_xbrs_pad[R_57d6f8d4_i] = 1'h0;
            end else begin
                M_xbrs_a[R_57d6f8d4_i] = M_xbrs_out[R_57d6f8d4_i - 1'h1];
                M_xbrs_shift[R_57d6f8d4_i] = b[R_57d6f8d4_i];
                M_xbrs_pad[R_57d6f8d4_i] = 1'h0;
            end
        end
        for (RR_2d84f977_i = 0; RR_2d84f977_i < 3'h5; RR_2d84f977_i = RR_2d84f977_i + 1) begin
      R_2d84f977_i = (0) + RR_2d84f977_i * (1);
            if (R_2d84f977_i == 1'h0) begin
                M_xbras_a[R_2d84f977_i] = a;
                M_xbras_shift[R_2d84f977_i] = b[R_2d84f977_i];
                M_xbras_pad[R_2d84f977_i] = a[5'h1f];
            end else begin
                M_xbras_a[R_2d84f977_i] = M_xbras_out[R_2d84f977_i - 1'h1];
                M_xbras_shift[R_2d84f977_i] = b[R_2d84f977_i];
                M_xbras_pad[R_2d84f977_i] = a[5'h1f];
            end
        end
        illop = 1'h0;
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_xbls_out[3'h4];
            end
            2'h1: begin
                shift = M_xbrs_out[3'h4];
            end
            2'h3: begin
                shift = M_xbras_out[3'h4];
            end
            default: begin
                shift = 1'h0;
                illop = 1'h1;
            end
        endcase
    end
    
    
endmodule