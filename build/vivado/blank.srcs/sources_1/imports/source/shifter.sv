/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift,
        output reg illop
    );
    logic [31:0] R_123e6223_i;
    logic [31:0] RR_123e6223_i;
    logic [31:0] R_74d16790_i;
    logic [31:0] RR_74d16790_i;
    logic [31:0] R_43dea1ea_i;
    logic [31:0] RR_43dea1ea_i;
    localparam logic [4:0][4:0] _MP_SHIFT_1996548102 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbls_a;
    logic [4:0] M_xbls_shift;
    logic [4:0] M_xbls_pad;
    logic [4:0][31:0] M_xbls_out;
    
    genvar idx_0_1996548102;
    
    generate
        for (idx_0_1996548102 = 0; idx_0_1996548102 < 5; idx_0_1996548102 = idx_0_1996548102 + 1) begin: forLoop_idx_0_1996548102
            x_bit_left_shifter #(
                .SHIFT(_MP_SHIFT_1996548102[idx_0_1996548102])
            ) xbls (
                .a(M_xbls_a[idx_0_1996548102]),
                .shift(M_xbls_shift[idx_0_1996548102]),
                .pad(M_xbls_pad[idx_0_1996548102]),
                .out(M_xbls_out[idx_0_1996548102])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_765468118 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbrs_a;
    logic [4:0] M_xbrs_shift;
    logic [4:0] M_xbrs_pad;
    logic [4:0][31:0] M_xbrs_out;
    
    genvar idx_0_765468118;
    
    generate
        for (idx_0_765468118 = 0; idx_0_765468118 < 5; idx_0_765468118 = idx_0_765468118 + 1) begin: forLoop_idx_0_765468118
            x_bit_right_shifter #(
                .SHIFT(_MP_SHIFT_765468118[idx_0_765468118])
            ) xbrs (
                .a(M_xbrs_a[idx_0_765468118]),
                .shift(M_xbrs_shift[idx_0_765468118]),
                .pad(M_xbrs_pad[idx_0_765468118]),
                .out(M_xbrs_out[idx_0_765468118])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_702888216 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbras_a;
    logic [4:0] M_xbras_shift;
    logic [4:0] M_xbras_pad;
    logic [4:0][31:0] M_xbras_out;
    
    genvar idx_0_702888216;
    
    generate
        for (idx_0_702888216 = 0; idx_0_702888216 < 5; idx_0_702888216 = idx_0_702888216 + 1) begin: forLoop_idx_0_702888216
            x_bit_right_ari_shifter #(
                .SHIFT(_MP_SHIFT_702888216[idx_0_702888216])
            ) xbras (
                .a(M_xbras_a[idx_0_702888216]),
                .shift(M_xbras_shift[idx_0_702888216]),
                .pad(M_xbras_pad[idx_0_702888216]),
                .out(M_xbras_out[idx_0_702888216])
            );
        end
    endgenerate
    
    
    always @* begin
        M_xbls_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbls_shift = 1'h0;
        M_xbls_pad = 1'h0;
        M_xbrs_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbrs_shift = 1'h0;
        M_xbrs_pad = 1'h0;
        M_xbras_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbras_shift = 1'h0;
        M_xbras_pad = 1'h0;
        for (RR_123e6223_i = 0; RR_123e6223_i < 3'h5; RR_123e6223_i = RR_123e6223_i + 1) begin
      R_123e6223_i = (0) + RR_123e6223_i * (1);
            if (R_123e6223_i == 1'h0) begin
                M_xbls_a[R_123e6223_i] = a;
                M_xbls_shift[R_123e6223_i] = b[R_123e6223_i];
                M_xbls_pad[R_123e6223_i] = 1'h0;
            end else begin
                M_xbls_a[R_123e6223_i] = M_xbls_out[R_123e6223_i - 1'h1];
                M_xbls_shift[R_123e6223_i] = b[R_123e6223_i];
                M_xbls_pad[R_123e6223_i] = 1'h0;
            end
        end
        for (RR_74d16790_i = 0; RR_74d16790_i < 3'h5; RR_74d16790_i = RR_74d16790_i + 1) begin
      R_74d16790_i = (0) + RR_74d16790_i * (1);
            if (R_74d16790_i == 1'h0) begin
                M_xbrs_a[R_74d16790_i] = a;
                M_xbrs_shift[R_74d16790_i] = b[R_74d16790_i];
                M_xbrs_pad[R_74d16790_i] = 1'h0;
            end else begin
                M_xbrs_a[R_74d16790_i] = M_xbrs_out[R_74d16790_i - 1'h1];
                M_xbrs_shift[R_74d16790_i] = b[R_74d16790_i];
                M_xbrs_pad[R_74d16790_i] = 1'h0;
            end
        end
        for (RR_43dea1ea_i = 0; RR_43dea1ea_i < 3'h5; RR_43dea1ea_i = RR_43dea1ea_i + 1) begin
      R_43dea1ea_i = (0) + RR_43dea1ea_i * (1);
            if (R_43dea1ea_i == 1'h0) begin
                M_xbras_a[R_43dea1ea_i] = a;
                M_xbras_shift[R_43dea1ea_i] = b[R_43dea1ea_i];
                M_xbras_pad[R_43dea1ea_i] = a[5'h1f];
            end else begin
                M_xbras_a[R_43dea1ea_i] = M_xbras_out[R_43dea1ea_i - 1'h1];
                M_xbras_shift[R_43dea1ea_i] = b[R_43dea1ea_i];
                M_xbras_pad[R_43dea1ea_i] = a[5'h1f];
            end
        end
        illop = 1'h0;
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_xbls_out[3'h4];
            end
            2'h1: begin
                shift = M_xbrs_out[3'h4];
            end
            2'h3: begin
                shift = M_xbras_out[3'h4];
            end
            default: begin
                shift = 1'h0;
                illop = 1'h1;
            end
        endcase
    end
    
    
endmodule