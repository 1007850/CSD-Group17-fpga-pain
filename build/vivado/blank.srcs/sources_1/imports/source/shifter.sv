/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift,
        output reg illop
    );
    logic [31:0] R_39dee3a4_i;
    logic [31:0] RR_39dee3a4_i;
    logic [31:0] R_39bbde9d_i;
    logic [31:0] RR_39bbde9d_i;
    logic [31:0] R_6700acc3_i;
    logic [31:0] RR_6700acc3_i;
    localparam logic [4:0][4:0] _MP_SHIFT_1050293913 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbls_a;
    logic [4:0] M_xbls_shift;
    logic [4:0] M_xbls_pad;
    logic [4:0][31:0] M_xbls_out;
    
    genvar idx_0_1050293913;
    
    generate
        for (idx_0_1050293913 = 0; idx_0_1050293913 < 5; idx_0_1050293913 = idx_0_1050293913 + 1) begin: forLoop_idx_0_1050293913
            x_bit_left_shifter #(
                .SHIFT(_MP_SHIFT_1050293913[idx_0_1050293913])
            ) xbls (
                .a(M_xbls_a[idx_0_1050293913]),
                .shift(M_xbls_shift[idx_0_1050293913]),
                .pad(M_xbls_pad[idx_0_1050293913]),
                .out(M_xbls_out[idx_0_1050293913])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_1120047640 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbrs_a;
    logic [4:0] M_xbrs_shift;
    logic [4:0] M_xbrs_pad;
    logic [4:0][31:0] M_xbrs_out;
    
    genvar idx_0_1120047640;
    
    generate
        for (idx_0_1120047640 = 0; idx_0_1120047640 < 5; idx_0_1120047640 = idx_0_1120047640 + 1) begin: forLoop_idx_0_1120047640
            x_bit_right_shifter #(
                .SHIFT(_MP_SHIFT_1120047640[idx_0_1120047640])
            ) xbrs (
                .a(M_xbrs_a[idx_0_1120047640]),
                .shift(M_xbrs_shift[idx_0_1120047640]),
                .pad(M_xbrs_pad[idx_0_1120047640]),
                .out(M_xbrs_out[idx_0_1120047640])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_804931830 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbras_a;
    logic [4:0] M_xbras_shift;
    logic [4:0] M_xbras_pad;
    logic [4:0][31:0] M_xbras_out;
    
    genvar idx_0_804931830;
    
    generate
        for (idx_0_804931830 = 0; idx_0_804931830 < 5; idx_0_804931830 = idx_0_804931830 + 1) begin: forLoop_idx_0_804931830
            x_bit_right_ari_shifter #(
                .SHIFT(_MP_SHIFT_804931830[idx_0_804931830])
            ) xbras (
                .a(M_xbras_a[idx_0_804931830]),
                .shift(M_xbras_shift[idx_0_804931830]),
                .pad(M_xbras_pad[idx_0_804931830]),
                .out(M_xbras_out[idx_0_804931830])
            );
        end
    endgenerate
    
    
    always @* begin
        M_xbls_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbls_shift = 1'h0;
        M_xbls_pad = 1'h0;
        M_xbrs_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbrs_shift = 1'h0;
        M_xbrs_pad = 1'h0;
        M_xbras_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbras_shift = 1'h0;
        M_xbras_pad = 1'h0;
        for (RR_39dee3a4_i = 0; RR_39dee3a4_i < 3'h5; RR_39dee3a4_i = RR_39dee3a4_i + 1) begin
      R_39dee3a4_i = (0) + RR_39dee3a4_i * (1);
            if (R_39dee3a4_i == 1'h0) begin
                M_xbls_a[R_39dee3a4_i] = a;
                M_xbls_shift[R_39dee3a4_i] = b[R_39dee3a4_i];
                M_xbls_pad[R_39dee3a4_i] = 1'h0;
            end else begin
                M_xbls_a[R_39dee3a4_i] = M_xbls_out[R_39dee3a4_i - 1'h1];
                M_xbls_shift[R_39dee3a4_i] = b[R_39dee3a4_i];
                M_xbls_pad[R_39dee3a4_i] = 1'h0;
            end
        end
        for (RR_39bbde9d_i = 0; RR_39bbde9d_i < 3'h5; RR_39bbde9d_i = RR_39bbde9d_i + 1) begin
      R_39bbde9d_i = (0) + RR_39bbde9d_i * (1);
            if (R_39bbde9d_i == 1'h0) begin
                M_xbrs_a[R_39bbde9d_i] = a;
                M_xbrs_shift[R_39bbde9d_i] = b[R_39bbde9d_i];
                M_xbrs_pad[R_39bbde9d_i] = 1'h0;
            end else begin
                M_xbrs_a[R_39bbde9d_i] = M_xbrs_out[R_39bbde9d_i - 1'h1];
                M_xbrs_shift[R_39bbde9d_i] = b[R_39bbde9d_i];
                M_xbrs_pad[R_39bbde9d_i] = 1'h0;
            end
        end
        for (RR_6700acc3_i = 0; RR_6700acc3_i < 3'h5; RR_6700acc3_i = RR_6700acc3_i + 1) begin
      R_6700acc3_i = (0) + RR_6700acc3_i * (1);
            if (R_6700acc3_i == 1'h0) begin
                M_xbras_a[R_6700acc3_i] = a;
                M_xbras_shift[R_6700acc3_i] = b[R_6700acc3_i];
                M_xbras_pad[R_6700acc3_i] = a[5'h1f];
            end else begin
                M_xbras_a[R_6700acc3_i] = M_xbras_out[R_6700acc3_i - 1'h1];
                M_xbras_shift[R_6700acc3_i] = b[R_6700acc3_i];
                M_xbras_pad[R_6700acc3_i] = a[5'h1f];
            end
        end
        illop = 1'h0;
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_xbls_out[3'h4];
            end
            2'h1: begin
                shift = M_xbrs_out[3'h4];
            end
            2'h3: begin
                shift = M_xbras_out[3'h4];
            end
            default: begin
                shift = 1'h0;
                illop = 1'h1;
            end
        endcase
    end
    
    
endmodule