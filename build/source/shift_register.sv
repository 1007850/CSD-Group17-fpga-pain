/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shift_register #(
        parameter WIDTH = 2'h2,
        parameter ENTRIES = 3'h4
    ) (
        input wire clk,
        input wire rst,
        input wire [(WIDTH)-1:0] din,
        input wire wput,
        output reg [(WIDTH)-1:0] dout,
        input wire rget
    );
    localparam ADDR_SIZE = $clog2(ENTRIES);
    logic [(ENTRIES)-1:0][(WIDTH)-1:0] D_mem_d, D_mem_q = 0;
    logic [(ADDR_SIZE)-1:0] D_waddr_d, D_waddr_q = 0;
    logic [(ADDR_SIZE)-1:0] D_raddr_d, D_raddr_q = 0;
    always @* begin
        D_mem_d = D_mem_q;
        D_waddr_d = D_waddr_q;
        D_raddr_d = D_raddr_q;
        
        D_mem_d = D_mem_q;
        D_waddr_d = D_waddr_q;
        D_raddr_d = D_raddr_q;
        dout = D_mem_q[D_raddr_q];
        if (wput) begin
            D_waddr_d = D_waddr_q + 1'h1;
            D_mem_d[D_waddr_q] = din;
        end
        if (rget) begin
            D_raddr_d = D_raddr_q + 1'h1;
        end
    end
    
    
    always @(posedge (clk)) begin
        D_mem_q <= D_mem_d;
        
    end
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_waddr_q <= 0;
            D_raddr_q <= 0;
        end else begin
            D_waddr_q <= D_waddr_d;
            D_raddr_q <= D_raddr_d;
        end
    end
endmodule