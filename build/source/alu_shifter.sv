/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu_shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift,
        output reg illop
    );
    logic [31:0] R_2276135a_i;
    logic [31:0] RR_2276135a_i;
    logic [31:0] R_6b85336b_i;
    logic [31:0] RR_6b85336b_i;
    logic [31:0] R_19b8554b_i;
    logic [31:0] RR_19b8554b_i;
    localparam logic [4:0][4:0] _MP_SHIFT_2029589864 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbls_a;
    logic [4:0] M_xbls_shift;
    logic [4:0] M_xbls_pad;
    logic [4:0][31:0] M_xbls_out;
    
    genvar idx_0_2029589864;
    
    generate
        for (idx_0_2029589864 = 0; idx_0_2029589864 < 5; idx_0_2029589864 = idx_0_2029589864 + 1) begin: forLoop_idx_0_2029589864
            alu_shifter_left #(
                .SHIFT(_MP_SHIFT_2029589864[idx_0_2029589864])
            ) xbls (
                .a(M_xbls_a[idx_0_2029589864]),
                .shift(M_xbls_shift[idx_0_2029589864]),
                .pad(M_xbls_pad[idx_0_2029589864]),
                .out(M_xbls_out[idx_0_2029589864])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_1544034123 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbrs_a;
    logic [4:0] M_xbrs_shift;
    logic [4:0] M_xbrs_pad;
    logic [4:0][31:0] M_xbrs_out;
    
    genvar idx_0_1544034123;
    
    generate
        for (idx_0_1544034123 = 0; idx_0_1544034123 < 5; idx_0_1544034123 = idx_0_1544034123 + 1) begin: forLoop_idx_0_1544034123
            alu_shifter_right #(
                .SHIFT(_MP_SHIFT_1544034123[idx_0_1544034123])
            ) xbrs (
                .a(M_xbrs_a[idx_0_1544034123]),
                .shift(M_xbrs_shift[idx_0_1544034123]),
                .pad(M_xbrs_pad[idx_0_1544034123]),
                .out(M_xbrs_out[idx_0_1544034123])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_24696038 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbras_a;
    logic [4:0] M_xbras_shift;
    logic [4:0] M_xbras_pad;
    logic [4:0][31:0] M_xbras_out;
    
    genvar idx_0_24696038;
    
    generate
        for (idx_0_24696038 = 0; idx_0_24696038 < 5; idx_0_24696038 = idx_0_24696038 + 1) begin: forLoop_idx_0_24696038
            alu_shifter_right_ari #(
                .SHIFT(_MP_SHIFT_24696038[idx_0_24696038])
            ) xbras (
                .a(M_xbras_a[idx_0_24696038]),
                .shift(M_xbras_shift[idx_0_24696038]),
                .pad(M_xbras_pad[idx_0_24696038]),
                .out(M_xbras_out[idx_0_24696038])
            );
        end
    endgenerate
    
    
    always @* begin
        M_xbls_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbls_shift = 1'h0;
        M_xbls_pad = 1'h0;
        M_xbrs_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbrs_shift = 1'h0;
        M_xbrs_pad = 1'h0;
        M_xbras_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbras_shift = 1'h0;
        M_xbras_pad = 1'h0;
        for (RR_2276135a_i = 0; RR_2276135a_i < 3'h5; RR_2276135a_i = RR_2276135a_i + 1) begin
      R_2276135a_i = (0) + RR_2276135a_i * (1);
            if (R_2276135a_i == 1'h0) begin
                M_xbls_a[R_2276135a_i] = a;
                M_xbls_shift[R_2276135a_i] = b[R_2276135a_i];
                M_xbls_pad[R_2276135a_i] = 1'h0;
            end else begin
                M_xbls_a[R_2276135a_i] = M_xbls_out[R_2276135a_i - 1'h1];
                M_xbls_shift[R_2276135a_i] = b[R_2276135a_i];
                M_xbls_pad[R_2276135a_i] = 1'h0;
            end
        end
        for (RR_6b85336b_i = 0; RR_6b85336b_i < 3'h5; RR_6b85336b_i = RR_6b85336b_i + 1) begin
      R_6b85336b_i = (0) + RR_6b85336b_i * (1);
            if (R_6b85336b_i == 1'h0) begin
                M_xbrs_a[R_6b85336b_i] = a;
                M_xbrs_shift[R_6b85336b_i] = b[R_6b85336b_i];
                M_xbrs_pad[R_6b85336b_i] = 1'h0;
            end else begin
                M_xbrs_a[R_6b85336b_i] = M_xbrs_out[R_6b85336b_i - 1'h1];
                M_xbrs_shift[R_6b85336b_i] = b[R_6b85336b_i];
                M_xbrs_pad[R_6b85336b_i] = 1'h0;
            end
        end
        for (RR_19b8554b_i = 0; RR_19b8554b_i < 3'h5; RR_19b8554b_i = RR_19b8554b_i + 1) begin
      R_19b8554b_i = (0) + RR_19b8554b_i * (1);
            if (R_19b8554b_i == 1'h0) begin
                M_xbras_a[R_19b8554b_i] = a;
                M_xbras_shift[R_19b8554b_i] = b[R_19b8554b_i];
                M_xbras_pad[R_19b8554b_i] = a[5'h1f];
            end else begin
                M_xbras_a[R_19b8554b_i] = M_xbras_out[R_19b8554b_i - 1'h1];
                M_xbras_shift[R_19b8554b_i] = b[R_19b8554b_i];
                M_xbras_pad[R_19b8554b_i] = a[5'h1f];
            end
        end
        illop = 1'h0;
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_xbls_out[3'h4];
            end
            2'h1: begin
                shift = M_xbrs_out[3'h4];
            end
            2'h3: begin
                shift = M_xbras_out[3'h4];
            end
            default: begin
                shift = 1'h0;
                illop = 1'h1;
            end
        endcase
    end
    
    
endmodule