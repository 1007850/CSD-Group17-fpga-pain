/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu #(
        parameter SIZE = 6'h20
    ) (
        input wire [31:0] a,
        input wire [31:0] b,
        input wire [5:0] alufn,
        output reg [31:0] out,
        output reg z,
        output reg v,
        output reg n
    );
    logic [(SIZE)-1:0] out_sig;
    always @* begin
        z = 1'h0;
        v = 1'h0;
        n = 1'h0;
        
        case (alufn)
            6'h0: begin
                out_sig = a + b;
                z = ~(|out_sig);
                v = (a[SIZE - 1'h1] & (b[SIZE - 1'h1] ^ alufn[1'h0]) & !out_sig[SIZE - 1'h1]) | (!a[SIZE - 1'h1] & !(b[SIZE - 1'h1] ^ alufn[1'h0]) & out_sig[SIZE - 1'h1]);
                n = out_sig[SIZE - 1'h1];
            end
            6'h1: begin
                out_sig = a - b;
                z = ~(|out_sig);
                v = (a[SIZE - 1'h1] & (b[SIZE - 1'h1] ^ alufn[1'h0]) & !out_sig[SIZE - 1'h1]) | (!a[SIZE - 1'h1] & !(b[SIZE - 1'h1] ^ alufn[1'h0]) & out_sig[SIZE - 1'h1]);
                n = out_sig[SIZE - 1'h1];
            end
            6'h16: begin
                out_sig = a ^ b;
            end
            6'h33: begin
                out_sig = a == b;
            end
            6'h35: begin
                out_sig = a < b;
            end
            6'h37: begin
                out_sig = a <= b;
            end
            default: begin
                out_sig = 1'h0;
            end
        endcase
        out = out_sig;
    end
    
    
endmodule