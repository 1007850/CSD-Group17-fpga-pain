/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module shifter (
        input wire [31:0] a,
        input wire [4:0] b,
        input wire [5:0] alufn,
        output reg [31:0] shift,
        output reg illop
    );
    logic [31:0] R_6960df31_i;
    logic [31:0] RR_6960df31_i;
    logic [31:0] R_57c2f81a_i;
    logic [31:0] RR_57c2f81a_i;
    logic [31:0] R_6de0cbfe_i;
    logic [31:0] RR_6de0cbfe_i;
    localparam logic [4:0][4:0] _MP_SHIFT_1040242434 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbls_a;
    logic [4:0] M_xbls_shift;
    logic [4:0] M_xbls_pad;
    logic [4:0][31:0] M_xbls_out;
    
    genvar idx_0_1040242434;
    
    generate
        for (idx_0_1040242434 = 0; idx_0_1040242434 < 5; idx_0_1040242434 = idx_0_1040242434 + 1) begin: forLoop_idx_0_1040242434
            x_bit_left_shifter #(
                .SHIFT(_MP_SHIFT_1040242434[idx_0_1040242434])
            ) xbls (
                .a(M_xbls_a[idx_0_1040242434]),
                .shift(M_xbls_shift[idx_0_1040242434]),
                .pad(M_xbls_pad[idx_0_1040242434]),
                .out(M_xbls_out[idx_0_1040242434])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_566177877 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbrs_a;
    logic [4:0] M_xbrs_shift;
    logic [4:0] M_xbrs_pad;
    logic [4:0][31:0] M_xbrs_out;
    
    genvar idx_0_566177877;
    
    generate
        for (idx_0_566177877 = 0; idx_0_566177877 < 5; idx_0_566177877 = idx_0_566177877 + 1) begin: forLoop_idx_0_566177877
            x_bit_right_shifter #(
                .SHIFT(_MP_SHIFT_566177877[idx_0_566177877])
            ) xbrs (
                .a(M_xbrs_a[idx_0_566177877]),
                .shift(M_xbrs_shift[idx_0_566177877]),
                .pad(M_xbrs_pad[idx_0_566177877]),
                .out(M_xbrs_out[idx_0_566177877])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][4:0] _MP_SHIFT_1008503404 = {{5'h10, 5'h8, 5'h4, 5'h2, 5'h1}};
    logic [4:0][31:0] M_xbras_a;
    logic [4:0] M_xbras_shift;
    logic [4:0] M_xbras_pad;
    logic [4:0][31:0] M_xbras_out;
    
    genvar idx_0_1008503404;
    
    generate
        for (idx_0_1008503404 = 0; idx_0_1008503404 < 5; idx_0_1008503404 = idx_0_1008503404 + 1) begin: forLoop_idx_0_1008503404
            x_bit_right_ari_shifter #(
                .SHIFT(_MP_SHIFT_1008503404[idx_0_1008503404])
            ) xbras (
                .a(M_xbras_a[idx_0_1008503404]),
                .shift(M_xbras_shift[idx_0_1008503404]),
                .pad(M_xbras_pad[idx_0_1008503404]),
                .out(M_xbras_out[idx_0_1008503404])
            );
        end
    endgenerate
    
    
    always @* begin
        M_xbls_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbls_shift = 1'h0;
        M_xbls_pad = 1'h0;
        M_xbrs_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbrs_shift = 1'h0;
        M_xbrs_pad = 1'h0;
        M_xbras_a = {{32'h0, 32'h0, 32'h0, 32'h0, 32'h0}};
        M_xbras_shift = 1'h0;
        M_xbras_pad = 1'h0;
        for (RR_6960df31_i = 0; RR_6960df31_i < 3'h5; RR_6960df31_i = RR_6960df31_i + 1) begin
      R_6960df31_i = (0) + RR_6960df31_i * (1);
            if (R_6960df31_i == 1'h0) begin
                M_xbls_a[R_6960df31_i] = a;
                M_xbls_shift[R_6960df31_i] = b[R_6960df31_i];
                M_xbls_pad[R_6960df31_i] = 1'h0;
            end else begin
                M_xbls_a[R_6960df31_i] = M_xbls_out[R_6960df31_i - 1'h1];
                M_xbls_shift[R_6960df31_i] = b[R_6960df31_i];
                M_xbls_pad[R_6960df31_i] = 1'h0;
            end
        end
        for (RR_57c2f81a_i = 0; RR_57c2f81a_i < 3'h5; RR_57c2f81a_i = RR_57c2f81a_i + 1) begin
      R_57c2f81a_i = (0) + RR_57c2f81a_i * (1);
            if (R_57c2f81a_i == 1'h0) begin
                M_xbrs_a[R_57c2f81a_i] = a;
                M_xbrs_shift[R_57c2f81a_i] = b[R_57c2f81a_i];
                M_xbrs_pad[R_57c2f81a_i] = 1'h0;
            end else begin
                M_xbrs_a[R_57c2f81a_i] = M_xbrs_out[R_57c2f81a_i - 1'h1];
                M_xbrs_shift[R_57c2f81a_i] = b[R_57c2f81a_i];
                M_xbrs_pad[R_57c2f81a_i] = 1'h0;
            end
        end
        for (RR_6de0cbfe_i = 0; RR_6de0cbfe_i < 3'h5; RR_6de0cbfe_i = RR_6de0cbfe_i + 1) begin
      R_6de0cbfe_i = (0) + RR_6de0cbfe_i * (1);
            if (R_6de0cbfe_i == 1'h0) begin
                M_xbras_a[R_6de0cbfe_i] = a;
                M_xbras_shift[R_6de0cbfe_i] = b[R_6de0cbfe_i];
                M_xbras_pad[R_6de0cbfe_i] = a[5'h1f];
            end else begin
                M_xbras_a[R_6de0cbfe_i] = M_xbras_out[R_6de0cbfe_i - 1'h1];
                M_xbras_shift[R_6de0cbfe_i] = b[R_6de0cbfe_i];
                M_xbras_pad[R_6de0cbfe_i] = a[5'h1f];
            end
        end
        illop = 1'h0;
        
        case (alufn[1'h1:1'h0])
            2'h0: begin
                shift = M_xbls_out[3'h4];
            end
            2'h1: begin
                shift = M_xbrs_out[3'h4];
            end
            2'h3: begin
                shift = M_xbras_out[3'h4];
            end
            default: begin
                shift = 1'h0;
                illop = 1'h1;
            end
        endcase
    end
    
    
endmodule